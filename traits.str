<?xml version="1.0" encoding="UTF-8"?>

<!-- This file contains the definitions of components associated with traits such as
      attributes, skills, special abilities, etc.
-->

<document signature="Hero Lab Structure">

  <!-- Trait component
        All traits derive from this component and share these mechanisms in common
  -->
  <component
    id="Trait"
    name="Trait"
    autocompset="no"
    hasshortname="yes"
    ispublic="no">

    <!-- Abbreviation for use in places like the TacCon -->
    <field
      id="trtAbbrev"
      name="Abbreviation"
      type="static"
      maxlength="5">
      </field>

    <!-- Minimum user-assigned value for the trait -->
    <field
      id="trtMinimum"
      name="Minimum Value"
      type="derived">
      </field>

    <!-- Maximum user-assigned value for the trait -->
    <field
      id="trtMaximum"
      name="Maximum Value"
      type="derived"
      defvalue="4">
      </field>

    <!-- User value assigned for the trait -->
    <field
      id="trtUser"
      name="User Value"
      type="user"
      usedelta="yes"
      maxfinal="50">
      <!-- Bound the user value to the limits established for the trait -->
      <bound phase="Attr" priority="1000" name="Bound trtUser">
        <before name="Calc trtFinal"/><![CDATA[
        @minimum = field[trtMinimum].value
        @maximum = field[trtMaximum].value
        ]]></bound>
      <!-- Final value for display is the fully adjusted net value that incorporates
            all adjustments from other sources
      -->
      <finalize><![CDATA[
        ~if we're in creation mode and not autonomous, we can't be modified
        if (hero.tagis[mode.creation] + !autonomous >= 2) then
          @text = "{bmp forbidden_up}"
        else
          @text = field[trtFinal].value
          endif
        ]]></finalize>
      </field>

    <!-- Bonuses applied to the trait (e.g. from other abilities) -->
    <field
      id="trtBonus"
      name="Bonus Value"
      type="derived">
      </field>
      
    <!-- In-play bonuses applied to the trait -->
    <field
      id="trtInPlay"
      name="In-Play Bonus"
      type="derived">
      </field>
      
    <field
      id="advBonus"
      name="Advancement Bonus"
      type="derived">
      </field>
      
    <field
      id="bkgBonus"
      name="Background Bonus"
      type="derived">
      </field>      

    <!-- Final value for the trait -->
    <field
      id="trtFinal"
      name="Final Value"
      type="derived">
      <!-- Calculate the final value from the three distinct pieces -->
      <calculate phase="Attr" priority="3000" name="Calc trtFinal"><![CDATA[
        ~Note! If you change this calculation, you may need to change the similar
        ~       calculation in the "Derived" component.
        @value = field[trtUser].value + field[trtBonus].value + field[trtInPlay].value + field[bkgBonus].value
        ]]></calculate>
      </field>

    <!-- Set the delta for the user value to be the current bonuses
        NOTE! This is necessary so incrementers have proper values when edited by the user.
        -->
    <eval index="1" phase="Render" priority="5000"><![CDATA[
      field[trtUser].delta = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    <!-- If the trait is at its minimum/maximum, assign a tag to preclude further advancements -->
    <eval index="2" phase="Final" priority="5000"><![CDATA[
      ~base our test on the adjusted trait value, sans any in-play adjustments
      var trait as number
      trait = field[trtUser].value + field[trtBonus].value
      if (trait <= field[trtMinimum].value) then
        perform assign[Helper.Minimum]
      elseif (trait >= field[trtMaximum].value) then
        perform assign[Helper.Maximum]
        endif
      ]]></eval>
      
    <eval index="3" phase="Attr" priority="5000"><![CDATA[
      field[trtFinal].value  += field[advBonus].value
      ]]></eval>

    </component>


  <!-- Attribute component
        Each attribute possessed by the actor derives from this component
  -->
  <component
    id="Attribute"
    name="Attribute"
    autocompset="no">
    
    <field
      id="IsPrimary"
      name="Is Primary Attribute?"
      type="derived">
      
      <!-- Calculate the final value from the three distinct pieces -->
      <calculate phase="Initialize" priority="3000" name="IsPrimary?"><![CDATA[
        @value = tagis[Helper.Primary]
        ]]></calculate>
      </field>
      
   
    <identity group="IsAttr" />
    <identity group="BgBonus" />
    <identity group="AttrPrim" />
    <identity group="AttrSec" />
    <identity group="FocAttr" />
    
    <!-- Attributes have a minimum trait value of -2 -->
    <eval index="1" phase="Initialize" priority="3000"><![CDATA[
      if (hero.tagis[source.PtBuyAttr] <> 0) then
        field[trtMinimum].value = 0
        field[trtMaximum].value = 3
      else
        field[trtMinimum].value = -2
        field[trtMaximum].value = 4
        endif
      ]]></eval>

    <!-- Each attribute point above one that is allocated by the user costs 7 CP -->
    <eval index="2" phase="Attr" priority="10000">
      <before name="Calc resLeft"/>
      <after name="Bound trtUser"/><![CDATA[
      doneif (hero.tagis[source.PtBuyAttr] = 0)
      hero.child[resAttr].field[resSpent].value += (field[trtUser].value)
      ]]></eval>
      
    </component>


  <!-- Skill component
        Each skill derives from this component
  -->
  <component
    id="Skill"
    name="Skill"
    autocompset="no">

    <!-- Net final roll that includes the value of the linked attribute -->
    
    <field
      id="sklRoll"
      name="Net Skill Roll"
      type="derived">
      <calculate phase="Final" priority="5000">
        <after name="Calc trtFinal"/><![CDATA[
        ~only access the linkage if the skill is directly on the hero; if not, it is
        ~likely within an advancement gizmo and no linkage will exist there
        if (container.ishero <> 0) then
          ~@value = field[trtFinal].value + linkage[attribute].field[trtFinal].value
          endif
        ]]></calculate>
      </field>
      

    <!-- Each skill is associated with a specific attribute that must be identified 
    <linkage linkage="attribute" optional="no"/> -->

    <!-- Each skill needs its own identity tag so existing skills can be identified during advancement -->
    <identity group="Skill"/>

    <!-- Every skill is shown on the "Rolls" mouse-over on the Dashboard/TacCon -->
    <tag group="DashTacCon" tag="Rolls"/>

    <!-- Track the skill on the actor -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Skill.?]
      ]]></eval>

    <!-- Each skill point that is allocated by the user costs 2 CP -->
    <eval index="2" phase="Attr" priority="10000">
      <before name="Calc resLeft"/>
      <after name="Bound trtUser"/><![CDATA[
      ~if this skill is not added directly to the hero (i.e. an advance), skip it entirely
      doneif (origin.ishero = 0)

      ~adjust the resource appropriately
      hero.child[resCP].field[resSpent].value += field[trtUser].value * 2
      ]]></eval>

    </component>


  <!-- Ability component
        Each special ability derives from this component
  -->
  <component
    id="Ability"
    name="Ability"
    autocompset="no">

    <!-- Activation state of ability - we're not activated by default -->
    <field
      id="abilActive"
      name="Is Activated?"
      type="user"
      minvalue="0"
      maxvalue="1">
      </field>

    <!-- Each ability needs its own identity tag to detect cascading dependencies via prereqs -->
    <identity group="Ability"/>

    <!-- Setup an identity tag group to track all activated abilities and adjustments -->
    <identity group="Activated"/>

    <!-- All abilities get the same tag for sorting purposes -->
    <tag group="SpecialTab" tag="Ability"/>

    <!-- Each ability that is added by the user costs 1 slot -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      if (isuser + origin.ishero >= 2) then
        hero.child[resAbility].field[resSpent].value += 1
        endif
      ]]></eval>

    <!-- Track the ability on the actor -->
    <eval index="2" phase="Setup" priority="5000"><![CDATA[
      perform forward[Ability.?]
      ]]></eval>

    <!-- If the ability is activated, designate it appropriately -->
    <eval index="3" phase="Setup" priority="100"><![CDATA[
      ~if we're not able to be activated, we don't qualify
      doneif (tagis[User.Activation] = 0)

      ~if we've been activated by the user, mark ourselves as activated; in addition,
      ~forward our identity tag to our parent actor; this allows the actor to track
      ~when abilities are activated and reflect the state to the user
      if (field[abilActive].value <> 0) then
        perform assign[Helper.Activated]
        perform forward[Activated.?]
        endif
      ]]></eval>

    <!-- Verify abilities that are only available at creation -->
    <prereq message="Only available during character creation.">
      <validate><![CDATA[
        ~we only report this as a failure things (once added, we assume the user knows best)
        validif (@ispick <> 0)

        ~if we are not designated as creation only, we're valid
        validif (altthing.tagis[User.CreateOnly] = 0)

        ~if the mode is creation, we're valid
        validif (state.iscreate <> 0)
        ]]></validate>
      </prereq>

    </component>


  <!-- Derived component
        Each derived trait (calculated from other traits) is based upon this component
  -->
  <component
    id="Derived"
    name="Derived Trait"
    autocompset="no">

    <!-- Derived traits are based on other traits. The "calculate" script on the
        "trtFinal" field value will work great for most traits, but NOT for derived
        traits. Consequently, derived traits need to re-calculate the field value AFTER
        the traits derived from are properly calculated. So the individual calculation
        scripts for each derived trait must occur AFTER the initial "trtFinal"
        calculation and BEFORE this derived calculation. We can also omit any "user"
        value from the calculation since derived traits have no user-defined facet.
        -->
    <eval index="1" phase="Attr" priority="6000" name="Derived trtFinal"><![CDATA[
      field[trtFinal].value = field[trtBonus].value + field[trtInPlay].value
      ]]></eval>

    </component>


  <!-- Race component
        Each race derives from this component
  -->
  <component
    id="Race"
    name="Race"
    autocompset="no">
    
    <field
      id="rBaseSpeed"
      name="Base Speed"
      type="derived">
      
      <calculate phase="Setup" priority="5000"><![CDATA[
      @value = tagvalue[BaseSpeed.?]
      ]]></calculate>
      </field>

    <!-- Each race needs its own identity tag to configure the hero appropriately -->
    <identity group="Race"/>
    <identity group="AllowRace" />

    <!-- Track the race on the actor by assigning the appropriate tag -->
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Race.?]
      ]]></eval>

    </component>
    
  <component
    id="Focus"
    name="Focus"
    autocompset="no">
    
    <field
      id="focLevel"
      name="Focus Level"
      defvalue="1"
      minvalue="1"
      maxvalue="1">
      
      <bound phase="PostLevels" priority="1000" name="Define Focus Max"><![CDATA[
        if (herofield[acTotLevel].value > 10) then
          @maximum = 2
          endif
        ]]></bound>
      </field>
    
    <!-- Each skill is associated with a specific attribute that must be identified -->
    <linkage linkage="attribute" optional="no"/>
    
    <identity group="Focus"/>
    <identity group="bkgFocus" />
    <identity group="bkgFocus2" />
    
    <eval index="1" phase="Setup" priority="5000"><![CDATA[
      perform forward[Focus.?]
      ]]></eval>
      
    <eval index="2" phase="Setup" priority="5000"><![CDATA[
      ~pull the identity tag of the linked attribute into the focus
      perform linkage[attribute].pullidentity[FocAttr]
      ]]></eval>   

    <eval index="3" phase="PostLevels" priority="2000"><![CDATA[
      if (tagis[portal.bgFocus] <> 0) then
        #resspent[resSrtFoc] += 1
        endif
      ]]></eval>        
      
    </component>
    
  <component
    id="Background"
    name="Background"
    autocompset="no"
    panellink="background"
    hasshortname="yes">
    
    <field
      id="bgAttrBon"
      name="Background Attr Bonus"
      type="derived"
      defvalue="1">
      </field>

    <field
      id="bgTable2"
      name="Table Val 2 Text"
      type="static"
      maxlength="50">
      </field>
      
    <field
      id="bgTable4"
      name="Table Val 3-4 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable5"
      name="Table Val 5 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable6"
      name="Table Val 6 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable8"
      name="Table Val 7-8 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable9"
      name="Table Val 9 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable11"
      name="Table Val 10-11 Text"
      type="static"
      maxlength="50">
      </field>

    <field
      id="bgTable12"
      name="Table Val 12 Text"
      type="static"
      maxlength="50">
      </field>
      
    <field
      id="bgClsCand1"
      maxlength="100"
      name="Class Candiate Expression 1"
      type="derived">
      

      </field>   

    <field
      id="bgFocCand1"
      maxlength="100"
      name="Focus Candiate Expression 1"
      type="derived">
      

      </field>
    
    <field
      id="bgTabCand1"
      maxlength="100"
      name="Table Candidate Expression 2"
      type="derived">
      
     
      </field>
      
   
    <identity group="Background" />
    <identity group="AllowBkg" />
    
    <eval index="1" phase="Setup" priority="200"><![CDATA[
      perform forward[AllowClass.?]
      perform forward[Background.?]
      perform forward[bkgFocus.?]
      perform forward[bkgTable.?]
      perform forward[AllowSoc.?]
      ]]></eval>
    
    <eval index="2" phase="PreAttr" priority="1000"><![CDATA[
    hero.findchild[Attribute, tagids[BgBonus.?,"|"]].field[bkgBonus].value += field[bgAttrBon].value
    ]]></eval>
    
    <eval index="3" phase="Render" priority="10000"><![CDATA[
    field[livename].text = field[shortname].text
    ]]></eval>
    
    <!-- Each background that is added by the user costs 1 slot -->
    <eval index="4" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      if (isuser + origin.ishero >= 2) then
        hero.child[resBkGrnd].field[resSpent].value += 1
        endif
      ]]></eval>    

    <eval index="7" phase="Render" priority="9999999"><![CDATA[
        field[bgTabCand1].text = "(component.bkgTable & (" & tagids[bkgTable.?,"|"] & ")"
        ]]></eval>     

      <eval index="5" phase="Render" priority="9999999"><![CDATA[
      if (tagis[bkgFocus.?] <> 0) then
        field[bgFocCand1].text = "component.Focus & (" & tagids[bkgFocus.?,"|"] & ")"
      else
        field[bgFocCand1].text = "FALSE"
        endif
      ]]></eval>    

      <eval index="6" phase="Render" priority="9999999"><![CDATA[
      if (tagis[AllowClass.?] <> 0) then
        field[bgClsCand1].text = "component.Class & (" & tagids[Class.?,"|"] & ")"
      else
        field[bgClsCand1].text = "FALSE"
        endif
      ]]></eval>      
    </component>
    
    
  <component
    id="AbiAdvance"
    name="Ability Advancement"
    autocompset="yes">
    
    <identity group="AttrUse" />
    </component>

   <component
     id="bkgTable"
     name="Background Table">
     
     <identity group="bkgTable" />
     
     <eval index="1" phase="PostLevels" priority="2000"><![CDATA[
       if (tagis[portal.bgTable] <> 0) then
         if (tagis[Helper.AttrBonus] + hero.tagis[source.PtBuyBkg] = 2) then
           hero.child[resBgTbl].field[resSpent].value += 2
         else
           hero.child[resBgTbl].field[resSpent].value += 1
           endif
         endif
       ]]></eval>
     </component>
     
    
  <component
    id="Class"
    name="Class"
    autocompset="no"
    hasshortname="yes">
    
    <field
      id="cStartHP"
      type="static"
      name="Starting HP">
      </field>
      
    <field
      id="cStartMP"
      type="static"
      name="Mana Points">
      
      </field> 
      
    <field
      id="cSpellTot"
      name="Total Spells per Level"
      type="derived"
      style="array"
      arrayrows="20">
      </field>
      
    <field
      id="cTalentTot"
      name="Total Talents per Level"
      type="derived"
      style="array"
      arrayrows="20">
      </field> 

    <field
      id="cSpecTot"
      name="Total Spec per Level"
      type="derived"
      style="array"
      arrayrows="20">
      </field> 
      
    <field
      id="cFocusTot"
      name="Total Focus per Level"
      type="derived"
      style="array"
      arrayrows="20">
      </field>       
    
    <identity group="Class" />
    <identity group="ClassReq" />
    <identity group="AllowClass" />
    <identity group="SpecClass" />
    <identity group="ClsTabLive" />
    
    <eval index="1" phase="Setup" priority="400"><![CDATA[
    perform forward[Class.?]
    perform forward[AttrPrim.?]
    perform forward[AttrSec.?]
    perform forward[Hero.Caster]
    perform forward[ClsTabLive.?]
    ]]></eval>
    
    <eval index="2" phase="PreLevels" priority="1000"><![CDATA[
    foreach pick in hero from Attribute
      if (eachpick.intersect[IsAttr,AttrPrim] <> 0) then
        perform eachpick.assign[Helper.Primary]
      else
        perform eachpick.assign[Helper.Secondary]
        endif
      nexteach
    ]]></eval>
    
    <eval index="3" phase="Setup" priority="5000"><![CDATA[
      ~we must ignore bootstrapped abilities from races and abilities added via advances
      if (isuser + origin.ishero >= 2) then
        hero.child[resClass].field[resSpent].value += 1
        endif
      ]]></eval>

    <eval index="4" phase="Setup" priority="5000"><![CDATA[
      hero.child[HitManaPt].field[cHPBonus].value += field[cStartHP].value  
      hero.child[HitManaPt].field[cMPBonus].value += field[cStartMP].value 
      ]]></eval>
    
    </component>
<!--    
  <component
    id="ClassLvl"
    name="Class Level"
    autocompset="no">
    
    <field
      id="cHP"
      name="Hit Points"
      type="user"
      defvalue="0">
      </field>
      
    <field
      id="cHPBonus"
      name="Hit Points Bonus"
      type="derived"
      defvalue="0">
      
      <calculate phase="PostAttr" priority="5000"><![CDATA[
      @value += #attrvalue[attrCon]
      ]]></calculate>
      </field>      

    <field
      id="cMP"
      name="Mana Points"
      type="user"
      defvalue="0">
      </field>
     
    
    
    </component>-->
    
    
  <component
    id="Spell"
    name="Spell"
    autocompset="no">
    
    <identity group="HasSpell" />
    <identity group="Spell" />
    
    <eval index="1" phase="Final" priority="99999999"><![CDATA[
    perform forward[HasSpell.?]
    ]]></eval>
    </component>
    
  <component
    id="Specialize"
    name="Specialization"
    autocompset="no">
    
    <identity group="HasSpec" />
    <identity group="Specialize" />
        
    <eval index="1" phase="Final" priority="99999999"><![CDATA[
    perform forward[HasSpec.?]
    ]]></eval>
    </component>

  <component
    id="Talent"
    name="Talent"
    autocompset="no">
    
    <field
      id="talLevel"
      name="Talent Level"
      defvalue="1"
      maxvalue="3">
      </field>    
    
    <identity group="HasTalent" />
    <identity group="Talent" />
    <identity group="bkgTalent" />
    
    <eval index="1" phase="Final" priority="99999999"><![CDATA[
    perform forward[HasTalent.?]
    ]]></eval>
    </component>     

  <component
    id="ClassPower"
    name="Class Power"
    autocompset="no">
    
    <field
      id="stPoints"
      name="Stunt Points"
      type="derived">
      
      <calculate phase="Setup" priority="200"><![CDATA[
      @value = tagvalue[StuntCost.?]
      ]]></calculate>
      </field>
      
    <field
      id="ClsStuntFi"
      name="Stunt Final"
      maxfinal="5">
      
      <finalize><![CDATA[
      if (tagis[StuntCost.Plus] <> 0) then
        @text = field[stPoints].value & "+"
      else
        @text = field[stPoints].value
        endif
      ]]></finalize>
      </field>
      

    <identity group="Stunt" />
    <identity group="HasStunt" />
    
    </component>
    
  <component
    id="SelectHelp"
    name="Selection Helper">
    
    <tag group="Helper" tag="Bootstrap" />
    </component>
    
  <component
    id="Language"
    name="Language">
    
    <identity group="Language" />
    <identity group="CanRead" />
    <identity group="CanSpeak" />
    
    <eval index="1" phase="Setup" priority="200"><![CDATA[
    if (tagis[Helper.CanRead] <> 0) then
      perform forward[CanRead.?]
      endif
    if (tagis[Helper.CanSpeak] <> 0) then
      perform forward[CanSpeak.?]
      endif
    ]]></eval>
    
    </component>
    
  <component
    id="AttrPrereq"
    name="Attribute Prereq"
    autocompset="no">
    
    <field
      id="reqCom"
      name="Required Communication"
      type="derived">
      </field>
      
    <field
      id="reqCon"
      name="Required Constituation"
      type="derived">
      </field>      
      
    <field
      id="reqCun"
      name="Required Cunning"
      type="derived">
      </field>

    <field
      id="reqDex"
      name="Required Dexterity"
      type="derived">
      </field>

    <field
      id="reqMag"
      name="Required Magic"
      type="derived">
      </field>

    <field
      id="reqPer"
      name="Required Perception"
      type="derived">
      </field>

    <field
      id="reqStr"
      name="Required Strength"
      type="derived">
      </field>

    <field
      id="reqWill"
      name="Required Willpower"
      type="derived">
      </field>
      
    <prereq message="Communications too low">
      <validate><![CDATA[
        validif (altthing.field[reqCom].value <= #attrvalue[attrCom])
        @message = "Communications " & altthing.field[reqCom].value & " or higher required."
        ]]></validate>
      </prereq>      

    <prereq message="Constitution too low">
      <validate><![CDATA[
        validif (altthing.field[reqCon].value <= #attrvalue[attrCon])
        @message = "Constitution " & altthing.field[reqCon].value & " or higher required."
        ]]></validate>
      </prereq>
      
    <prereq message="Cunning too low">
      <validate><![CDATA[
        validif (altthing.field[reqCun].value <= #attrvalue[attrCun])
        @message = "Cunning " & altthing.field[reqCun].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Dexterity too low">
      <validate><![CDATA[
        validif (altthing.field[reqDex].value <= #attrvalue[attrDex])
        @message = "Dexterity " & altthing.field[reqDex].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Magic too low">
      <validate><![CDATA[
        validif (altthing.field[reqMag].value <= #attrvalue[attrMag])
        @message = "Communications " & altthing.field[reqMag].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Communications too low">
      <validate><![CDATA[
        validif (altthing.field[reqCom].value <= #attrvalue[attrCom])
        @message = "Communications " & altthing.field[reqCom].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Perception too low">
      <validate><![CDATA[
        validif (altthing.field[reqPer].value <= #attrvalue[attrPer])
        @message = "Perception " & altthing.field[reqPer].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Strength too low">
      <validate><![CDATA[
        validif (altthing.field[reqStr].value <= #attrvalue[attrStr])
        @message = "Strength " & altthing.field[reqCom].value & " or higher required."
        ]]></validate>
      </prereq>

    <prereq message="Willpower too low">
      <validate><![CDATA[
        validif (altthing.field[reqWill].value <= #attrvalue[attrWill])
        @message = "Willpower " & altthing.field[reqCom].value & " or higher required."
        ]]></validate>
      </prereq>
      
    </component>
    
  <component
    id="HitManaPt"
    name="Hit Point/Mana Point">
    
    <field
      id="cHP1"
      name="Level 1 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>
      
    <field
      id="cHP2"
      name="Level 2 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP3"
      name="Level 3 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP4"
      name="Level 4 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP5"
      name="Level 5 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP6"
      name="Level 6 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP7"
      name="Level 7 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP8"
      name="Level 8 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP9"
      name="Level 9 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cHP10"
      name="Level 10 Hit Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>      

    <field
      id="cMP1"
      name="Level 1 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>

    <field
      id="cMP2"
      name="Level 2 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP3"
      name="Level 3 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP4"
      name="Level 4 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP5"
      name="Level 5 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP6"
      name="Level 6 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP7"
      name="Level 7 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP8"
      name="Level 8 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP9"
      name="Level 9 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field> 

    <field
      id="cMP10"
      name="Level 10 Mana Points"
      minvalue="0"
      maxvalue="6"
      type="user">
      </field>
      
    <field
      id="cHPBonus"
      name="Class Hit Point Bonus"
      type="derived">
      </field>
      
    <field
      id="cMPBonus"
      name="Class Mana Point Bonus"
      type="derived">
      </field>
      
    <field
      id="attrHPBon"
      name="Attribute HP Bonus"
      type="derived">
      
      <calculate phase="PostAttr" priority="5000"><![CDATA[
        @value = #attrvalue[attrCon] * herofield[acTotLevel].value
        ]]></calculate>
      </field>
      
    <field
      id="attrMPBon"
      name="Attribute MP Bonus"
      type="derived">
      
      <calculate phase="PostAttr" priority="5000"><![CDATA[
        @value = #attrvalue[attrMag] * herofield[acTotLevel].value
        ]]></calculate>
      </field>      

    </component>
    
  <component
    id="SocialCls"
    name="Social Class"
    autocompset="no">
    
    <identity group="AllowSoc" />
    </component>
    
    

        


  <!-- Define various component sets associated with the components defined above.
  -->

  <!-- No compsets are auto-defined for the component -->

  <!-- Attribute - all attributes derive from this compset -->
  <compset
    id="Attribute"
    forceunique="yes">
    <compref component="Attribute"/>
    <compref component="Trait"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Skill - all skills derive from this compset -->
  <compset
    id="Skill"
    forceunique="yes">
    <compref component="Skill"/>
    <compref component="Trait"/>
    <compref component="Domain"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Ability - all abilities derive from this compset -->
  <compset
    id="Ability">
    <compref component="Ability"/>
    <compref component="Trait"/>
    <compref component="SpecialTab"/>
    <compref component="CanAdvance"/>
    </compset>

  <!-- Trait - all derived traits are based on this compset -->
  <compset
    id="Trait">
    <compref component="Derived"/>
    <compref component="Trait"/>
    </compset>

  <!-- Race - all races derive from this compset -->
  <compset
    id="Race"
    forceunique="yes">
    <compref component="Race"/>
    </compset>
    
  <compset
    id="Class"
    forceunique="yes">
    <compref component="Class"/>
    </compset>
    
  <compset
    id="Specialize"
    forceunique="yes">
    <compref component="Specialize" />
    <compref component="Ability" />
    <compref component="AttrPrereq" />
    </compset>
    
<!--   
  <compset
    id="ClassLvl"
    forceunique="no">
    <compref component="ClassLvl"/>
    </compset>
    -->
    
  <compset
    id="Focus"
    forceunique="yes">
    <compref component="Focus" />
    <compref component="bkgTable" />
    </compset>
    
  <compset
    id="Talent"
    forceunique="yes">
    <compref component="Talent" />
    <compref component="Ability" />
    </compset>
    
  <compset
    id="Background"
    forceunique="yes">
    <compref component="Background" />
    </compset>
    
  <compset
    id="ClassPower">
    <compref component="ClassPower" />
    <compref component="Ability" />
    </compset>
    
  <compset
    id="SocialCls"
    forceunique="yes">
    <compref component="SocialCls" />
    </compset>
    
 
    


  </document>
